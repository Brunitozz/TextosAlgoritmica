Clase ColeccionEnvio
    Atributos
        Arreglo parte
        id
    Metodos 
        Constructor(parteLength) 
        AgregarParte(nombre, idProducto)
        EliminarParte(nombre, idProducto)

        BuscarParte(idProducto)
        MostrarParte(idProducto)
        ListaParte()
    fMetodos
fClase

Metodo ColeccionEnvio.Constructor(parteLength)
    id <-- 0
    parte dimension[1...parteLength] contiene Parte
fMetodo 

Metodo ColeccionEnvio.AgregarParte(nombre, idProducto)
    id <-- id + 1
    parte[id].nombre <-- nombre
    parte[id].idProducto <-- idProducto
fMetodo

Método CColeccionParte.posicionParte(idProducto) ->
    posicion <- 0
    p <- 1
    Mientras (p <= id y posicion <> 0) hacer
        Si (idProducto = parte[p].obtenerParteId()) entonces
            posicion <- p
        sino
            Si (idProducto < parte[p].obtenerParteId()) entonces
                p <- id + 1
            sino
                p <- p + 1
            fSi
        fsi
    fMientras
    retornar posicion
fmétodo

Método CColeccionParte.agregarParte(idProducto, sNombre) ->
    Si(posiciónParte(idProducto) = 0) entonces
        Objeto temp ejemplar_de CParte
        temp.constructor((idProducto, sNombre)
        id <- id + 1
        Si (id = 1) entonces
            parte[id] <- temp
            retornar verdadero
        sino
            Si (id <= parte.longitud()) entonces
                aux <- id - 1
                Mientras (aux > 0 y idProducto < parte[aux].obtenerParteId()) hacer
                    parte[aux + 1] <- parte[aux]
                    aux <- aux - 1
                fMientras
                parte[aux + 1] <- temp
                retornar verdadero
            sino
                id <- parte.longitud()
                retornar Falso
            fSi
        fSi
    sino
        retornar Falso
    fsi
fmétodo

Metodo ColeccionEnvio.EliminarParte(nombre, idProducto)
    posicion <- posiciónParte(idProducto)
    Si(posicion <> 0) entonces
        parte[posicion] <- nulo
        Para p desde posicion hasta id - 1 hacer
            parte[p] <- parte[p + 1]
        fPara
        parte[id] <- nulo
        id <- id - 1
        retornar verdadero
    sino
        retornar Falso
    fsi
fMetodo

Metodo ColeccionEnvio.BuscarParte(idProducto)
    p <- 1
    Mientras (p <= id) hacer
        Si (idProducto = parte[p].obtenerParteId()) entonces
            retornar parte[p]
        sino
            Si (idProducto < parte[p].obtenerParteId()) entonces
                p <- id + 1
            sino
                p <- p + 1
            fSi
        fsi
    fMientras
    retornar nulo
fMetodo 

Metodo ColeccionEnvio.MostrarParte(idProducto)
    Si(Posicion <= id) entonces
        retornar parte[Posicion]
    sino
        retornar nulo
    fsi
fMetodo

Metodo ColeccionEnvio.ListaParte()
    Para cada i en 1 hasta id
        Si (parte[i].nombre <> "") entonces
            Mostrar "Nombre: ", parte[i].nombre
            Mostrar "ID Producto: ", parte[i].idProducto
        FinSi
    FinPara
fMetodo


